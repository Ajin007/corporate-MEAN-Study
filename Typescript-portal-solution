***************************************Week-4/Day-1/session-3/Question-2***************************

        interface ProductList {
            productId: number;
            Amount: number;
        }

        interface CartItem extends ProductList {
            quantity: number;
        }

        const productlist: ProductList[] = [
            { productId: 1, Amount: 10.00 },
            { productId: 2, Amount: 20.00 },
            { productId: 3, Amount: 30.00 }
        ];

        let cart: CartItem[] = [];

        function productList() {
            const createproductlist = document.getElementById('productContainer');

            if (createproductlist) {
                createproductlist.innerHTML = "";
                productlist.forEach((product, index) => {
                    const productItem = document.createElement('div');
                    productItem.className = "product";

                    productItem.innerHTML = `
                        <h5>Product ${product.productId}</h5>
                        <h6>$${product.Amount.toFixed(2)}</h6>
                        <button onclick="addToCart(${product.productId}, ${product.Amount})">Add to cart</button>
                    `;
                    createproductlist.appendChild(productItem);
                });
            }
        }

        function addToCart(productId: number, Amount: number) {
            const existingitem = cart.find(item => item.productId === productId);
            if (existingitem) {
                existingitem.quantity += 1;
            } else {
                cart.push({ productId, Amount, quantity: 1 });
            }
            createCart();
        }

        function createCart() {
            const callcart = document.getElementById('CartList');
            if (callcart) {
                callcart.innerHTML = "";
                cart.forEach((cartcal, index) => {
                    const cartitem = document.createElement("div");
                    cartitem.className = "cart-item";

                    cartitem.innerHTML = `
                        <span>Product ${cartcal.productId} - $${cartcal.Amount.toFixed(2)} x ${cartcal.quantity}</span>
                        <button onclick="removeFromCart(${cartcal.productId})">Remove</button>
                    `;
                    callcart.appendChild(cartitem);
                });
            }
        }

        function removeFromCart(productId: number) {
            const index = cart.findIndex(item => item.productId === productId);
            if (index !== -1) {
                cart.splice(index, 1);
            }
            createCart();
        }

        productList();



**********************************Week4/Day2/session-3/Q-3*******************************************
<!DOCTYPE html>
<html>

<head>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        #taskForm {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }

        #taskInput {
            width: 300px;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        #addTaskButton {
            padding: 10px 20px;
            border: none;
            background-color: #8e44ad;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }

        #taskList {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .taskItem {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
            width: 300px;
        }

        .taskItem button {
            margin-top: 5px;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .completeButton {
            background-color: #f1c40f;
            color: black;
        }

        .deleteButton {
            background-color: #e74c3c;
            color: white;
        }
    </style>
</head>

<body>

    <div id="container">
        <h1>Task Management System</h1>
        <div id="taskManagementSystem">

        </div>

    </div>
    <script src="script.js"></script>
</body>





</html>

ts part :::::::::::::::::::::::::

interface Task {
    id: number;
    description: string;
    completed: boolean;
}

// Create the form and task list container programmatically
function createTaskManagementSystem() {
    const taskManagementSystem = document.getElementById('taskManagementSystem')!;

    // Create form
    const taskForm = document.createElement('form');
    taskForm.id = 'taskForm';
    
    const taskInput = document.createElement('input');
    taskInput.id = 'taskInput';
    taskInput.type = 'text';
    taskInput.placeholder = 'Enter a new task';

    const addTaskButton = document.createElement('button');
    addTaskButton.id = 'addTaskButton';
    addTaskButton.type = 'button';
    addTaskButton.textContent = 'Add Task';
    addTaskButton.addEventListener('click', addTask);
    
    taskForm.appendChild(taskInput);
    taskForm.appendChild(addTaskButton);

      // Create task list container
      const taskList = document.createElement('div');
      taskList.id = 'taskList';
      
      taskManagementSystem.appendChild(taskForm);
      taskManagementSystem.appendChild(taskList);

}
let tasks: Task[] = [];
let nextTaskId = 1;

function addTask() {
    const taskInput = document.getElementById('taskInput') as HTMLInputElement;
    const description = taskInput.value.trim();

    if (description === "") {
        alert("Task description cannot be empty.");
        return;
    }

    const newTask: Task = {
        id: nextTaskId++,
        description,
        completed: false,
    };

    tasks.push(newTask);
    taskInput.value = "";
    renderTasks();
}

function renderTasks() {
    const taskList = document.getElementById('taskList')!;
    taskList.innerHTML = "";

    tasks.forEach(task => {
        const taskItem = document.createElement('div');
        taskItem.className = 'taskItem';

        const taskDescription = document.createElement('span');
        taskDescription.textContent = task.description;
        taskItem.appendChild(taskDescription);

        const completeButton = document.createElement('button');
        completeButton.className = 'completeButton';
        completeButton.textContent = task.completed ? 'Completed' : 'Complete';
        completeButton.addEventListener('click', () => completeTask(task.id));
        taskItem.appendChild(completeButton);

        const deleteButton = document.createElement('button');
        deleteButton.className = 'deleteButton';
        deleteButton.textContent = 'Delete';
        deleteButton.addEventListener('click', () => deleteTask(task.id));
        taskItem.appendChild(deleteButton);

        taskList.appendChild(taskItem);
    });
}
function completeTask(taskId: number) {
    const task = tasks.find(t => t.id === taskId);
    if (task) {
        task.completed = !task.completed;
        renderTasks();
    }
}

function deleteTask(taskId: number) {
    tasks = tasks.filter(t => t.id !== taskId);
    renderTasks();
}

// Initialize the task management system
createTaskManagementSystem();



**************************week-4/Day-2/session-1-Q1***********************************************


<!DOCTYPE html>
<html>
<head>
   
</head>
<body>
    <div>
        <h1>LIBRARY MANAGEMENT SYSTEM</h1>
        <input type="text" id="bookTitle">
        <input type="text" id="bookAuthor">
        <select id="bookGenre">

            <option value="Fiction">Fiction</option>
            </select>

        <button id="add-book">Add Book</button>

    </div>
    <div id="books-list">

    </div>
    <script src="script.js"></script>
</body>
</html>


script ::::::::::::::::::::::::::::::::::::::::::::::::::

interface Book{
    title:string;
    author:string;
    genre:string
}

//creating the logics based on the class

class Library {

    private books:Book[]=[];
    //Declaring the Html Divelement datatype directly
    private bookListContainer:HTMLDivElement;

    
    constructor(){
        this.bookListContainer=document.getElementById("books-list") as HTMLDivElement;
        this.init();
    }
    
    // create an init method to get the button clicked and so a method addBook() wil be created and acceseed
    private init():void {
       const addbookbutton= document.getElementById("add-book") as HTMLButtonElement;
       addbookbutton.addEventListener('click',()=>{this.addBook()})
        
    }
   
   private addBook():void {

    // as HTMLInputElement we are using this so only the value is accesible in the 35th line
     const titleInput= document.getElementById("bookTitle") as HTMLInputElement;
       const authorInput=document.getElementById("bookAuthor") as HTMLInputElement;
      const selectGenre= document.getElementById("bookGenre") as HTMLSelectElement;

      //to avoid the whitespace used in the input we shal use the trim
      const title=titleInput.value.trim();
      const author=authorInput.value.trim();
      const genre=selectGenre.value.trim();

      //create the alert for empty process
      if(!title || !author || !genre){
        alert("Please fill in all the required fields");
        return;
      }
      const newBook: Book = { title, author, genre };
      this.books.push(newBook);
      this.displayBooks();
      this.clearForm();

    }
    private displayBooks(): void {
      this.bookListContainer.innerHTML = '';

      this.books.forEach((book,index) => {
          const bookItem = document.createElement('div');
          bookItem.className = 'book-item';
          bookItem.innerHTML = `
              <strong>Title:</strong> ${book.title}<br>
              <strong>Author:</strong> ${book.author}<br>
              <strong>Genre:</strong> ${book.genre}
              <button class="delete-book" data-index=${index}>Delete</button>
          `;// button added for the deletion
          this.bookListContainer.appendChild(bookItem);
      });

      const deleteButtons=document.querySelectorAll('.delete-book');
      deleteButtons.forEach(button =>{
        button.addEventListener("click",(event)=>{this.deleteBook(event)})
      })
  }
  private deleteBook(event: Event):void {
    const button=event.target as HTMLButtonElement;
    const index=button.getAttribute("data-index");
    if(index !== null){
      this.books.splice(Number(index),1);
      this.displayBooks();
    }
   
  }

  private clearForm(): void {
      (document.getElementById("bookTitle") as HTMLInputElement).value = '';
      (document.getElementById("bookAuthor") as HTMLInputElement).value = '';
      (document.getElementById("bookGenre") as HTMLSelectElement).value = '';
  }
}



document.addEventListener('DOMContentLoaded',()=>{
  new Library();
})


